#!/usr/bin/env python3
"""
Script de migra√ß√£o do sistema de notas fiscais
Migra do SQLite atual para PostgreSQL com SQLAlchemy
"""

import os
import sys
import pandas as pd
import sqlite3
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

def migrate_from_sqlite_to_new_system():
    """Migra dados do SQLite atual para o novo sistema."""
    
    print("üîÑ INICIANDO MIGRA√á√ÉO DO SISTEMA DE NOTAS FISCAIS")
    print("="*60)
    
    # Caminhos dos arquivos
    old_db_path = Path('data/registros.db')
    old_excel_path = Path('data/registros.xlsx')
    backup_dir = Path('backup_migracao')
    
    # Cria diret√≥rio de backup
    backup_dir.mkdir(exist_ok=True)
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    print(f"üìÅ Diret√≥rio de backup: {backup_dir}")
    print(f"‚è∞ Timestamp da migra√ß√£o: {timestamp}")
    
    # Lista para armazenar todos os dados
    all_data = []
    
    # 1. Migra dados do SQLite se existir
    if old_db_path.exists():
        print(f"\nüìä Migrando dados do SQLite: {old_db_path}")
        try:
            conn = sqlite3.connect(old_db_path)
            df_sqlite = pd.read_sql_query("SELECT * FROM registros", conn)
            conn.close()
            
            print(f"   ‚úÖ {len(df_sqlite)} registros encontrados no SQLite")
            all_data.append(df_sqlite)
            
            # Backup do SQLite
            backup_sqlite = backup_dir / f'registros_sqlite_{timestamp}.db'
            old_db_path.rename(backup_sqlite)
            print(f"   üíæ Backup criado: {backup_sqlite}")
            
        except Exception as e:
            print(f"   ‚ùå Erro ao migrar SQLite: {e}")
    
    # 2. Migra dados do Excel se existir
    if old_excel_path.exists():
        print(f"\nüìà Migrando dados do Excel: {old_excel_path}")
        try:
            df_excel = pd.read_excel(old_excel_path, engine='openpyxl')
            print(f"   ‚úÖ {len(df_excel)} registros encontrados no Excel")
            all_data.append(df_excel)
            
            # Backup do Excel
            backup_excel = backup_dir / f'registros_excel_{timestamp}.xlsx'
            old_excel_path.rename(backup_excel)
            print(f"   üíæ Backup criado: {backup_excel}")
            
        except Exception as e:
            print(f"   ‚ùå Erro ao migrar Excel: {e}")
    
    # 3. Consolida todos os dados
    if all_data:
        print(f"\nüîó Consolidando dados de {len(all_data)} fontes...")
        
        # Combina todos os DataFrames
        df_combined = pd.concat(all_data, ignore_index=True)
        
        # Remove duplicatas baseado em uf, nfe, pedido
        df_combined = df_combined.drop_duplicates(
            subset=['uf', 'nfe', 'pedido'], 
            keep='last'
        )
        
        print(f"   ‚úÖ {len(df_combined)} registros √∫nicos ap√≥s consolida√ß√£o")
        
        # Salva dados consolidados para o novo sistema
        consolidated_path = Path('data/registros_consolidados.xlsx')
        df_combined.to_excel(consolidated_path, index=False, engine='openpyxl')
        print(f"   üíæ Dados consolidados salvos: {consolidated_path}")
        
        return len(df_combined)
    
    else:
        print("\n‚ö†Ô∏è  Nenhum dado encontrado para migra√ß√£o")
        return 0

def setup_new_system():
    """Configura o novo sistema com SQLAlchemy."""
    
    print(f"\nüîß CONFIGURANDO NOVO SISTEMA")
    print("="*40)
    
    # Verifica se as depend√™ncias est√£o instaladas
    try:
        import flask_sqlalchemy
        import flask_migrate
        import psycopg2
        print("‚úÖ Depend√™ncias do SQLAlchemy instaladas")
    except ImportError as e:
        print(f"‚ùå Depend√™ncia faltando: {e}")
        print("üí° Execute: pip install -r requirements_new.txt")
        return False
    
    # Verifica configura√ß√£o do banco
    database_url = os.getenv('DATABASE_URL')
    if database_url:
        print(f"‚úÖ DATABASE_URL configurada: {database_url[:50]}...")
    else:
        print("‚ö†Ô∏è  DATABASE_URL n√£o configurada, usando SQLite local")
    
    # Cria arquivo .env se n√£o existir
    env_file = Path('.env')
    if not env_file.exists():
        print("üìù Criando arquivo .env...")
        with open(env_file, 'w') as f:
            f.write("# Configura√ß√µes do Sistema de Notas Fiscais\n")
            f.write("FLASK_ENV=development\n")
            f.write("FLASK_DEBUG=True\n")
            if not database_url:
                f.write("DATABASE_URL=sqlite:///data/registros.db\n")
            f.write("SECRET_KEY=sua_chave_secreta_aqui\n")
        print(f"   ‚úÖ Arquivo .env criado: {env_file}")
    
    return True

def test_new_system():
    """Testa o novo sistema."""
    
    print(f"\nüß™ TESTANDO NOVO SISTEMA")
    print("="*30)
    
    try:
        # Importa o novo sistema
        sys.path.insert(0, str(Path.cwd()))
        from database_sqlalchemy import DatabaseManager
        from flask import Flask
        
        # Cria aplica√ß√£o de teste
        app = Flask(__name__)
        app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'sqlite:///data/registros.db')
        app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
        
        # Testa o gerenciador
        db_manager = DatabaseManager(app)
        
        with app.app_context():
            # Verifica integridade
            integrity = db_manager.validate_data_integrity()
            
            print(f"‚úÖ Tipo do banco: {integrity['database_type']}")
            print(f"‚úÖ Conectividade: {integrity['conectividade']}")
            print(f"‚úÖ Total de registros: {integrity['total_registros']}")
            
            if integrity['problemas']:
                for problema in integrity['problemas']:
                    print(f"‚ö†Ô∏è  {problema}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def main():
    """Fun√ß√£o principal do script de migra√ß√£o."""
    
    print("üöÄ SCRIPT DE MIGRA√á√ÉO - SISTEMA DE NOTAS FISCAIS")
    print("="*70)
    print("Este script migra do sistema atual para SQLAlchemy + PostgreSQL")
    print()
    
    # Verifica se est√° no diret√≥rio correto
    if not Path('main.py').exists():
        print("‚ùå Execute este script no diret√≥rio raiz do projeto")
        return
    
    # Passo 1: Migra√ß√£o de dados
    print("PASSO 1: Migra√ß√£o de dados existentes")
    migrated_count = migrate_from_sqlite_to_new_system()
    
    # Passo 2: Configura√ß√£o do novo sistema
    print("\nPASSO 2: Configura√ß√£o do novo sistema")
    if not setup_new_system():
        print("‚ùå Falha na configura√ß√£o do novo sistema")
        return
    
    # Passo 3: Teste do novo sistema
    print("\nPASSO 3: Teste do novo sistema")
    if test_new_system():
        print("\nüéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print(f"üìä {migrated_count} registros migrados")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Substitua 'main.py' por 'main_sqlalchemy.py'")
        print("2. Substitua 'database.py' por 'database_sqlalchemy.py'")
        print("3. Atualize 'requirements.txt' com 'requirements_new.txt'")
        print("4. Configure DATABASE_URL para PostgreSQL no Render")
        print("5. Fa√ßa deploy da nova vers√£o")
    else:
        print("\n‚ùå FALHA NO TESTE DO NOVO SISTEMA")
        print("Verifique os erros acima antes de prosseguir")

if __name__ == "__main__":
    main()

